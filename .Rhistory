knitr::opts_chunk$set(echo = TRUE, eval = F)
fp <- data.frame(Y = c(7,9,10,11,12,15),
`Py` = c(0.1, 0.2,0.2,0.1,0.3,0.1))
names(fp)
18*0.5
exp(1)
round(exp(1))
round(exp(1), 2)
4/5
1-0.769
1/2*1/2
knitr::opts_chunk$set(echo = TRUE, eval = T)
knitr::kable(data.frame(
Resposta = paste0('P(Y = 15) =',round(dbinom(15,15,0.8), 2))
)
)
knitr::kable(data.frame(
Resposta = paste0('1- P(Y = 15) - P(Y = 14) =',1 - round(dbinom(15,15,0.8), 3) - round(dbinom(14,15,0.8), 3))))
knitr::kable(data.frame(
Resposta = paste0('1- P(Y = 0) =',1 - round(dbinom(0,15,0.8), 3))))
round(dbinom(0,15,0.8), 3)
1 - dbinom(0,15,0.8)
seq(0,2, 0.1)
seq(0,2, 0.1)(1/4)
seq(0,2, 0.1)*1/4
data.frame(y = seq(0,2, 0.1),
p = seq(0,2, 0.1)*1/4)
x<-data.frame(y = seq(0,2, 0.1),
p = seq(0,2, 0.1)*1/4)
plot(p~y, x)
x<-data.frame(y = c(seq(0,2, 0.1),
seq(2,6, 0.1)),
p = c(seq(0,2, 0.1)*1/4,
NA))
x<-data.frame(y = c(seq(0,2, 0.1),
seq(2,6, 0.1)),
p = c(seq(0,2, 0.1)*1/4,
rep(1/8, length(seq(2,6, 0.1)))))
plot(p~y, x)
plot(p~y, x, type = 'l')
c(0.1, 0.4, 0.5)
c(0.1, 0.4, 0.5)/2
2*0.05
2*0.2
2*0.25
1/4
1/5
1/10
1/20
par(mar=c(5, 2.5, 0, 0))
plot(1, type = 'n', xaxt = 'n', yaxt = 'n', xlim = c(-1,7), ylim = c(0,0.3),
xlab = "Y", ylab = c("P(Y=y)"))
axis(1, at=c(1,3,7,10), labels=c(1,3,7,10))
axis(1, at=c(0,2,4,6), labels=c(0,2,4,6))
plot(1, type = 'n', xaxt = 'n', yaxt = 'n', xlim = c(-1,7), ylim = c(0,0.3),
xlab = "Y", ylab = c("P(Y=y)"))
axis(1, at=c(0,2,4,6), labels=c(0,2,4,6))
axis(2, at=c(0.05, 0.2,0.25), labels=c(0.05, 0.2,0.25))
lines(x = c(0:2), y = rep(0.05,3), lwd = 2)
lines(x = c(2:4), y = rep(0.2,3), lwd = 2)
lines(x = c(4:6), y = rep(0.25,3), lwd = 2)
points(c(3,7), c(0.25,0.05), pch=1)
points(c(2,4), c(0.05,0.2), pch=1)
segments(c(1, 3, 7, 10), 0,
c(1, 3, 7, 10),
c(0.25, 0.25, 0.1, 0.1),
lty=3)
segments(c(0, 2, 4, 6), 0,
c(1, 3, 7, 10),
c(0.25, 0.25, 0.1, 0.1),
lty=3)
par(mar=c(5, 2.5, 0, 0))
plot(1, type = 'n', xaxt = 'n', yaxt = 'n', xlim = c(-1,7), ylim = c(0,0.3),
xlab = "Y", ylab = c("P(Y=y)"))
axis(1, at=c(0,2,4,6), labels=c(0,2,4,6))
axis(2, at=c(0.05, 0.2,0.25), labels=c(0.05, 0.2,0.25))
lines(x = c(0:2), y = rep(0.05,3), lwd = 2)
lines(x = c(2:4), y = rep(0.2,3), lwd = 2)
lines(x = c(4:6), y = rep(0.25,3), lwd = 2)
points(c(2,4), c(0.05,0.2), pch=1)
segments(c(0, 2, 4, 6), 0,
c(0, 2, 4, 6),
c(0.25, 0.25, 0.1, 0.1),
lty=3)
par(mar=c(5, 2.5, 0, 0))
plot(1, type = 'n', xaxt = 'n', yaxt = 'n', xlim = c(-1,7), ylim = c(0,0.3),
xlab = "Y", ylab = c("P(Y=y)"))
axis(1, at=c(0,2,4,6), labels=c(0,2,4,6))
axis(2, at=c(0.05, 0.2,0.25), labels=c(0.05, 0.2,0.25))
lines(x = c(0:2), y = rep(0.05,3), lwd = 2)
lines(x = c(2:4), y = rep(0.2,3), lwd = 2)
lines(x = c(4:6), y = rep(0.25,3), lwd = 2)
points(c(2,4), c(0.05,0.2), pch=1)
segments(c(0, 2, 4, 6), 0,
c(0, 2, 4, 6),
c(0.05, 0.2, 0.25, 0.25),
lty=3)
points(c(0,2,4), c(0.05,0.2,0.25), pch=1)
points(c(0,2,4), c(0.05,0.2,0.25), pch=2)
points(c(0,2,4), c(0.05,0.2,0.25), pch=19)
par(mar=c(5, 2.5, 0, 0))
plot(1, type = 'n', xaxt = 'n', yaxt = 'n', xlim = c(-1,7), ylim = c(0,0.3),
xlab = "Y", ylab = c("P(Y=y)"))
axis(1, at=c(0,2,4,6), labels=c(0,2,4,6))
axis(2, at=c(0.05, 0.2,0.25), labels=c(0.05, 0.2,0.25))
lines(x = c(0:2), y = rep(0.05,3), lwd = 2)
lines(x = c(2:4), y = rep(0.2,3), lwd = 2)
lines(x = c(4:6), y = rep(0.25,3), lwd = 2)
points(c(2,4), c(0.05,0.2), pch=1)
points(c(0,2,4), c(0.05,0.2,0.25), pch=19)
segments(c(0, 2, 4, 6), 0,
c(0, 2, 4, 6),
c(0.05, 0.2, 0.25, 0.25),
lty=3)
par(mar=c(4, 2.5, 0, 0))
plot(1, type = 'n', xaxt = 'n', yaxt = 'n', xlim = c(-1,7), ylim = c(0,0.3),
xlab = "Y", ylab = c("P(Y=y)"))
axis(1, at=c(0,2,4,6), labels=c(0,2,4,6))
axis(2, at=c(0.05, 0.2,0.25), labels=c(0.05, 0.2,0.25))
lines(x = c(0:2), y = rep(0.05,3), lwd = 2)
lines(x = c(2:4), y = rep(0.2,3), lwd = 2)
lines(x = c(4:6), y = rep(0.25,3), lwd = 2)
points(c(2,4), c(0.05,0.2), pch=1)
points(c(0,2,4), c(0.05,0.2,0.25), pch=19)
0.05+0.4+0.25
0.2/(0.2+0.5)
round(0.2/(0.2+0.5), 3)
24*0.5
74+57
y <- c(0:20)
py <- dbinom(y, 20, 0.7)
data.frame(y, py)
py <- round(dbinom(y, 20, 0.7), 4)
data.frame(y, py)
exp(1)
exp(-1)
1-exp(-1)
exp(-1)/2
3678+3678+1840
0.3678*2
py <- round( dhyper(y, 3, 9, 4) , 4)
y <- c(0:4)
py <- round( dhyper(y, 3, 9, 4) , 4)
data.frame(y, py)
1-py[1:2]
1-sum(py[1:2])
sum(py[1:2])
1/0.2
1/(0.2^2)
0.2*20
exp(-4)
1-0.0183
0.2*5
exp(-1)
1-0.3679
1-0.6321
477+341
341+498
0.5-0.498
0.5-0.477
rnorm(500, mean = 50, 10)
x <- rnorm(500, mean = 50, 10)
table(x)
as.character(x)
x <- as.character(x)
strsplit(x, split = .)
strsplit(x, split = '.')
73/(169+145+73)
knitr::opts_chunk$set(echo = TRUE, eval = T)
fp <- data.frame(Y = c(7,9,10,11,12,15),
`Py` = c(0.1, 0.2,0.2,0.1,0.3,0.1))
names(fp)[2] <- "P(Y=y)"
knitr::kable(
t(fp))
sum(fp$Y*fp$Py)
names(fp)
posicao <- function(vetor){
table <- data.frame(Minimo = quantile(vetor, na.rm = T)[1],
Quartil_1 = quantile(vetor, na.rm = T)[2],
Media = mean(vetor, na.rm = T),
Mediana = quantile(vetor, na.rm = T)[3],
Quartil_3 = quantile(vetor, na.rm = T)[4],
Maximo = quantile(vetor, na.rm = T)[5])
row.names(table) <- NULL
names(table) <- c('Mínimo', 'Q1', 'Média', 'Mediana', 'Q3', 'Máximo')
table
}
dispersao <- function(vetor){
table <- data.frame(Amplitude = diff(range(vetor, na.rm = T)),
Variancia = var(vetor, na.rm = T),
Desvio_padrao = sd(vetor, na.rm = T)#,
#Coef_variacao = 100*sd(vetor)/mean(vetor)
)
names(table) <- c('Amplitude', 'Variância', 'Desvio padrão')
table
}
notas <- readxl::read_xls('notas-chamada.xls')
DT::datatable(notas[,c('GRR', 'FALTAS', 'PROVA 1',
'REMOTA 1', 'REMOTA 2',
'REMOTA 3',
'PARCIAL')],
class = 'cell-border stripe',
rownames = F,
#filter = 'top',
editable = T
)
notas <- readxl::read_xls('notas-chamada.xls')
DT::datatable(notas[,c('GRR', 'FALTAS',
'PROVA 1', 'PROVA 2',
'REMOTA 1', 'REMOTA 2',
'REMOTA 3',
'PARCIAL')],
class = 'cell-border stripe',
rownames = F,
#filter = 'top',
editable = T
)
pander::pander(posicao(notas$`PROVA 2`))
pander::pander(dispersao(notas$`PROVA 2`))
library(ggplot2)
library(ggpubr)
ggplot(notas) +
geom_histogram(aes(x=`PROVA 2`,
y=..density..),
position="identity",
col = 1,
lwd = 1,
breaks = seq(0,10,0.5)) +
geom_density(aes(x=`PROVA 2`,
y=..density..),
col = 4,
lwd = 1) +
ylab("Densidade") +
xlab("") +
ggtitle("Prova 2")+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
text = element_text(size=15))
ggplot(data = notas,
mapping = aes(y=`PROVA 2`, x='1')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
#xlim(c(0,10)) +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
ylab("Notas") +
xlab("") +
#ggtitle("Titulo")+
scale_y_continuous(limits = c(0, 10))+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
axis.text.y=element_blank(),
text = element_text(size=15)) +coord_flip()
p1 = ggplot(notas) +
geom_histogram(aes(x=`PROVA 2`,
y=..density..),
position="identity",
col = 1,
lwd = 1,
breaks = seq(0,10,0.5)) +
geom_density(aes(x=`PROVA 2`,
y=..density..),
col = 4,
lwd = 1) +
ylab("Densidade") +
xlab("") +
ggtitle("Prova 2")+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
text = element_text(size=15))
p2 = ggplot(data = notas,
mapping = aes(y=`PROVA 2`, x='1')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
#xlim(c(0,10)) +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
ylab("Notas") +
xlab("") +
#ggtitle("Titulo")+
scale_y_continuous(limits = c(0, 10))+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
axis.text.y=element_blank(),
text = element_text(size=15)) +coord_flip()
ggarrange(p1, p2,
heights = c(2, 1),
align = "hv",
ncol = 1,
nrow = 2)
setwd("~/CE009CS")
rmarkdown::render_site()
rmarkdown::render_site()
